// Generated by CoffeeScript 1.4.0
(function() {

  describe("Consecutive Runs", function() {
    beforeEach(function() {
      this.arr = [];
      this.arrOneItem = [1];
      return this.arrTwoItems = [1, 2];
    });
    it("should return null when the array has fewer than 3 items", function() {
      var notAnArray;
      notAnArray = this.arr.findConsecutiveRuns();
      expect(notAnArray).toBeNull();
      notAnArray = this.arrOneItem.findConsecutiveRuns();
      expect(notAnArray).toBeNull();
      notAnArray = this.arrTwoItems.findConsecutiveRuns();
      return expect(notAnArray).toBeNull();
    });
    return describe("when the array has 3 or more items", function() {
      beforeEach(function() {
        this.arr = [1, 1, 1];
        this.arrDoubles = [2, 4, 6];
        return this.arrSquares = [25, 16, 9, 4];
      });
      it("should return null when the array has no consecutive numbers", function() {
        var notAnArray;
        notAnArray = this.arr.findConsecutiveRuns();
        expect(notAnArray).toBeNull();
        notAnArray = this.arrDoubles.findConsecutiveRuns();
        expect(notAnArray).toBeNull();
        notAnArray = this.arrSquares.findConsecutiveRuns();
        return expect(notAnArray).toBeNull();
      });
      return describe("and the array has consecutive numbers", function() {
        beforeEach(function() {
          this.arr = [1, 2, 3, 0];
          this.arrTeens = [2, 12, 13, 14];
          this.arrReverse = [4, 6, 1, 9, 8, 7, 25, 16, 9, 4];
          this.arrMultiple = [0, 7, 4, 3, 4, 5, 8, 3, 2, 1];
          return this.arrOverlap = [1, 2, 3, 4, 5];
        });
        it("should return an array when the consecutive numbers are increasing", function() {
          var anArray, anotherArray;
          anArray = this.arr.findConsecutiveRuns();
          anotherArray = this.arrTeens.findConsecutiveRuns();
          expect(anArray).toEqual(jasmine.any(Array));
          expect(anArray.length).toBe(1);
          expect(anArray[0]).toBe(0);
          expect(anotherArray).toEqual(jasmine.any(Array));
          expect(anotherArray.length).toBe(1);
          return expect(anotherArray[0]).toBe(1);
        });
        it("should return an array when the consecutive numbers are decreasing", function() {
          var anArray;
          anArray = this.arrReverse.findConsecutiveRuns();
          expect(anArray).toEqual(jasmine.any(Array));
          expect(anArray.length).toBe(1);
          return expect(anArray[0]).toBe(3);
        });
        it("should return an array when there multiple sets of consecutive numbers", function() {
          var anArray;
          anArray = this.arrMultiple.findConsecutiveRuns();
          expect(anArray).toEqual(jasmine.any(Array));
          expect(anArray.length).toBe(2);
          expect(anArray[0]).toBe(3);
          return expect(anArray[1]).toBe(7);
        });
        return it("should return an array when the consecutive numbers overlap", function() {
          var anArray;
          anArray = this.arrOverlap.findConsecutiveRuns();
          expect(anArray).toEqual(jasmine.any(Array));
          return expect(anArray.length).toBe(3);
        });
      });
    });
  });

}).call(this);
